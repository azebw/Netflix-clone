{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/azebi/Desktop/netFlix/netflix/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/azebi/Desktop/netFlix/netflix/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/azebi/Desktop/netFlix/netflix/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import axios from\"./axios\";import\"./Row.css\";import YouTube from\"react-youtube\";import movieTrailer from\"movie-trailer\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var base_url=\"https://image.tmdb.org/t/p/original/\";function Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,isLargeRow=_ref.isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;console.log(request);setMovies(request.data.results);return _context.abrupt(\"return\",request);case 6:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchUrl]);// console.log(movies);\nvar opts={heighr:\"390\",width:\"100%\",playerVars:{autoplay:1}};var handleClick=function handleClick(movie){if(trailerUrl){setTrailerUrl(\"\");}else{movieTrailer((movie===null||movie===void 0?void 0:movie.title)||\"\").then(function(url){var urlParams=new URLSearchParams(new URL(url).search);setTrailerUrl(urlParams.get(\"v\"));}).catch(function(error){return console.log(error);});}};return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row__posters\",children:movies.map(function(movie){return/*#__PURE__*/_jsx(\"img\",{onClick:function onClick(){return handleClick(movie);},className:\"row__poster \".concat(isLargeRow&&\"row__posterLarge\"),src:\"\".concat(base_url).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name});})}),/*#__PURE__*/_jsx(\"div\",{style:{padding:\"40px\"},children:trailerUrl&&/*#__PURE__*/_jsx(YouTube,{videoId:trailerUrl,opts:opts})})]});}export default Row;","map":{"version":3,"sources":["C:/Users/azebi/Desktop/netFlix/netflix/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","get","request","console","log","data","results","opts","heighr","width","playerVars","autoplay","handleClick","movie","then","url","urlParams","URLSearchParams","URL","search","catch","error","map","poster_path","backdrop_path","name","padding"],"mappings":"odAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAO,WAAP,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,MAAOC,CAAAA,YAAP,KAAyB,eAAzB,C,wFACA,GAAMC,CAAAA,QAAQ,CAAG,sCAAjB,CACA,QAASC,CAAAA,GAAT,MAA8C,IAA/BC,CAAAA,KAA+B,MAA/BA,KAA+B,CAAxBC,QAAwB,MAAxBA,QAAwB,CAAdC,UAAc,MAAdA,UAAc,CAC5C,cAA4BT,QAAQ,CAAC,EAAD,CAApC,wCAAOU,MAAP,eAAeC,SAAf,eACA,eAAoCX,QAAQ,CAAC,EAAD,CAA5C,yCAAOY,UAAP,eAAmBC,aAAnB,eACAZ,SAAS,CAAC,UAAM,SACCa,CAAAA,SADD,qIACd,qKACwBZ,CAAAA,KAAK,CAACa,GAAN,CAAUP,QAAV,CADxB,QACQQ,OADR,eAEEC,OAAO,CAACC,GAAR,CAAYF,OAAZ,EACAL,SAAS,CAACK,OAAO,CAACG,IAAR,CAAaC,OAAd,CAAT,CAHF,gCAISJ,OAJT,wDADc,4CAOdF,SAAS,GACV,CARQ,CAQN,CAACN,QAAD,CARM,CAAT,CASA;AACA,GAAMa,CAAAA,IAAI,CAAG,CACXC,MAAM,CAAE,KADG,CAEXC,KAAK,CAAE,MAFI,CAGXC,UAAU,CAAE,CACVC,QAAQ,CAAE,CADA,CAHD,CAAb,CAOA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAW,CAC7B,GAAIf,UAAJ,CAAgB,CACdC,aAAa,CAAC,EAAD,CAAb,CACD,CAFD,IAEO,CACLT,YAAY,CAAC,CAAAuB,KAAK,OAAL,EAAAA,KAAK,SAAL,QAAAA,KAAK,CAAEpB,KAAP,GAAgB,EAAjB,CAAZ,CACGqB,IADH,CACQ,SAACC,GAAD,CAAS,CACb,GAAMC,CAAAA,SAAS,CAAG,GAAIC,CAAAA,eAAJ,CAAoB,GAAIC,CAAAA,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB,CACApB,aAAa,CAACiB,SAAS,CAACf,GAAV,CAAc,GAAd,CAAD,CAAb,CACD,CAJH,EAKGmB,KALH,CAKS,SAACC,KAAD,QAAWlB,CAAAA,OAAO,CAACC,GAAR,CAAYiB,KAAZ,CAAX,EALT,EAMD,CACF,CAXD,CAaA,mBACE,aAAK,SAAS,CAAC,KAAf,wBACE,oBAAK5B,KAAL,EADF,cAEE,YAAK,SAAS,CAAC,cAAf,UACGG,MAAM,CAAC0B,GAAP,CAAW,SAACT,KAAD,qBACV,YACE,OAAO,CAAE,yBAAMD,CAAAA,WAAW,CAACC,KAAD,CAAjB,EADX,CAEE,SAAS,uBAAiBlB,UAAU,EAAI,kBAA/B,CAFX,CAGE,GAAG,WAAKJ,QAAL,SACDI,UAAU,CAAGkB,KAAK,CAACU,WAAT,CAAuBV,KAAK,CAACW,aADtC,CAHL,CAME,GAAG,CAAEX,KAAK,CAACY,IANb,EADU,EAAX,CADH,EAFF,cAcE,YAAK,KAAK,CAAE,CAAEC,OAAO,CAAE,MAAX,CAAZ,UACG5B,UAAU,eAAI,KAAC,OAAD,EAAS,OAAO,CAAEA,UAAlB,CAA8B,IAAI,CAAES,IAApC,EADjB,EAdF,GADF,CAoBD,CAED,cAAef,CAAAA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      console.log(request);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n  // console.log(movies);\r\n  const opts = {\r\n    heighr: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n  const handleClick = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(movie?.title || \"\")\r\n        .then((url) => {\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((error) => console.log(error));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className=\"row__posters\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            onClick={() => handleClick(movie)}\r\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div style={{ padding: \"40px\" }}>\r\n        {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n"]},"metadata":{},"sourceType":"module"}