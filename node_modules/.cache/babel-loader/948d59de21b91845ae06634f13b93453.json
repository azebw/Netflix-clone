{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\azebi\\\\Desktop\\\\netFlix\\\\netflix\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Row({\n  title,\n  fetchUrl\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      console.log(request); // setMovies(request.data.results);\n\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]); // const opts = {\n  //   heighr: \"390\",\n  //   width: \"100%\",\n  //   playerVars: {\n  //     autoplay: 1,\n  //   }\n  // }\n  // const handleClick = (movie) => {\n  //   if(trailerUrl){\n  //     setTrailerUrl('')\n  //   }else {\n  //     movieTrailer(movie?.title || \"\")\n  //     .then((url) => {\n  //       const urlParams = new URLSearchParams(new URL(url).search)\n  //       setTrailerUrl(urlParams.get('v'))\n  //     })\n  //     .catch((error) => console.log(error))\n  //   }\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/Users/azebi/Desktop/netFlix/netflix/src/Row.js"],"names":["React","useState","useEffect","axios","Row","title","fetchUrl","movies","setMovies","fetchData","request","get","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;;;AAEA,SAASC,GAAT,CAAa;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAb,EAAkC;AAAA;;AAChC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeO,SAAf,GAA2B;AACzB,YAAMC,OAAO,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAUL,QAAV,CAAtB;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ,EAFyB,CAGzB;;AACA,aAAOA,OAAP;AACD;;AACDD,IAAAA,SAAS;AACV,GARQ,EAQN,CAACH,QAAD,CARM,CAAT,CAHgC,CAYhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAA,gBAAKD;AAAL;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;;GArDQD,G;;KAAAA,G;AAuDT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\n\r\nfunction Row({ title, fetchUrl }) {\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      console.log(request);\r\n      // setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n  // const opts = {\r\n  //   heighr: \"390\",\r\n  //   width: \"100%\",\r\n  //   playerVars: {\r\n  //     autoplay: 1,\r\n  //   }\r\n  // }\r\n  // const handleClick = (movie) => {\r\n  //   if(trailerUrl){\r\n  //     setTrailerUrl('')\r\n  //   }else {\r\n  //     movieTrailer(movie?.title || \"\")\r\n  //     .then((url) => {\r\n  //       const urlParams = new URLSearchParams(new URL(url).search)\r\n  //       setTrailerUrl(urlParams.get('v'))\r\n  //     })\r\n  //     .catch((error) => console.log(error))\r\n  //   }\r\n  // }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      {/* //     <div className=\"row__posters\">\r\n  //       {movies.map((movie) => ( */}\r\n      {/* //         <img */}\r\n      {/* //           key={movie.id}\r\n  //           onClick={() => handleClick(movie)}\r\n  //           className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n  //           src={`${base_url}${ */}\r\n      {/* //             isLargeRow ? movie.poster_path : movie.backdrop_path\r\n  //           }`}\r\n  //           alt={movie.name}\r\n  //         />\r\n        // ))}\r\n  //     </div> */}\r\n      {/* //     <div style={{ padding: \"40px\"}}>\r\n  //      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n  //     </div> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n"]},"metadata":{},"sourceType":"module"}